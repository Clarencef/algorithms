{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 0501f65afa4580cba501","webpack:///./src/index.js"],"names":[],"mappings":"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","file":"binarySearch.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"binarySearch\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"binarySearch\"] = factory();\n\telse\n\t\troot[\"binarySearch\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0501f65afa4580cba501\n **/","export default class BinarySearch {\n\n  constructor() {\n      this._root = null;\n    }\n    // 先序遍歷：遍歷順序是：根、左子樹、右子樹。 \n    // 傳入的process 是一個必須節點內執行的function\n  traverse(process) {\n\n    //用來recursive traverse每個節點的 helper function \n    function inOrder(node) {\n      if (node) {\n        if (node.left !== null) {\n          inOrder(node.left);\n        }\n\n        process.call(this, node);\n\n        if (node.right !== null) {\n          inOrder(node.right);\n        }\n      }\n    }\n\n    inOrder(this._root);\n  }\n\n  add(value) {\n    // 創造新的節點\n    let node = {\n        value: value,\n        left: null,\n        right: null\n      },\n      // 用來作為遍歷節點的當前節點\n      current;\n    if (this._root === null) {\n      this._root = node;\n    } else {\n      current = this._root;\n      while (true) {\n        // 如果傳入的value小於當前節點的值，往當前節點的左邊節點尋找\n        if (value < current.value) {\n          if (current.left === null) {\n            // 設定node為當前節點的左節點，並離開loop\n            current.left = node;\n            break;\n          } else {\n            // 設定當前節點的左節點為當前節點，並繼續進行loop\n            current = current.left;\n          }\n        }\n        // 如果傳入的value小於當前節點的值，往當前節點的左邊節點尋找\n        else if (value > current.value) {\n          if (current.right === null) {\n            current.right = node;\n            break;\n          } else {\n            current = current.right;\n          }\n        } else {\n          // value = 當前節點的值，不增加節點並跳出loop\n          break;\n        }\n      }\n    }\n  }\n\n  remove(value) {\n    let found = false,\n      parent = null,\n      current = this._root,\n      childCount,\n      replacementParent,\n      replacement;\n    \n    while (!found && current) {\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else {\n        found = true;\n      }\n    }\n\n    if (found) {\n      childCount = (current.left !== null ? 1 : 0) + (current.right !== null ? 1 : 0);\n      if (current === this._root) {\n        switch (childCount) {\n          case 0:\n            this._root = null;\n            break;\n          case 1:\n            this._root = current.right === null ? current.left : current.right;\n            break;\n          case 2:\n            replacement = this._root.left;\n            //選出左分支最大的值\n            while (replacement.right !== null) {\n              replacementParent = replacement;\n              replacement = replacement.right;\n            }\n\n            if (replacementParent !== null) {\n\n              //將左分支最大的值從原來的位置移除\n              replacementParent.right = replacement.left;\n\n              //將左分支最大的值作為root node，\n              //原root node的左右子節點設為新root node 左右子節\n              replacement.right = this._root.right;\n              replacement.left = this._root.left;\n            } else {\n              //左分支因this._root.left沒有子節點而消失\n              replacement.right = this._root.right;\n            }\n\n            //將replacement設為新root node\n            this._root = replacement;\n            break;\n          default:\n            break;\n        }\n      } else {\n        switch (childCount) {\n          case 0:\n            if (current.value < parent.value) {\n              parent.left = null;\n            } else {\n              parent.right = null;\n            };\n            break;\n          case 1:\n            if (current.value < parent.value) {\n              parent.left = (current.left === null ? current.right : current.left);\n            } else {\n              parent.right = (current.left === null ? current.right : current.left);\n            };\n            break;\n          case 2:\n            //將current左子節點設為取代節點，current = replacementParent\n            replacement = current.left;\n            replacementParent = current;\n\n            //選出左分支最大的值\n            while (replacement.right !== null) {\n              replacementParent = replacement;\n              replacement = replacement.right;\n            }\n\n            replacementParent.right = replacement.left;\n\n            replacement.right = current.right;\n            replacement.left = current.left;\n\n            if (current.value < parent.value) {\n              parent.left = replacement;\n            } else {\n              parent.right = replacement;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  // 給定一個value 若 這個value出現在二元樹中 return true，反之 return false\n  contains(value) {\n    let found = false,\n      current = this._root; // 每次while loop實都會被變更為當前node\n\n    // 當found不等於true，並有還有剩餘節點時繼續執行loop\n    while (!found && current) {\n\n      // 如果輸入值小於當前node的值，往當前node的left node尋找該值\n      if (value < current.value) {\n        current = current.left;\n        // 如果輸入值大於當前node的值，往當前node的right node尋找該值\n      } else if (value > current.value) {\n        current = current.right;\n        // 輸入值等於當前node的值，set found = true找到該節點\n      } else {\n        found = true;\n      }\n    }\n\n    return found;\n  }\n\n  size() {\n    let length = 0;\n\n    this.traverse(function(node) {\n      length++;\n    });\n\n    return length;\n  }\n\n  toArray() {\n    let result = [];\n\n    this.traverse(function(node) {\n      result.push(node.value);\n    });\n\n    return result;\n  }\n\n  toString() {\n    return this.toArray.toString();\n  }\n\n    myconsole () {\n  \tconsole.log(this._root);\n  } \n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/"],"sourceRoot":""}